{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instanceAddress",
          "type": "address"
        }
      ],
      "name": "CreateTokenSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "airdrop",
          "type": "address"
        }
      ],
      "name": "SetAirdrop",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidate",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "initialAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalSaleSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "privatePoolSaleStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "privatePoolSaleEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicPoolSaleStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicPoolSaleEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "privatePoolTokenPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicPoolTokenPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "democracyHourEndTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicRoundBuyLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "escrowPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "tierPrices",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[2][]",
              "name": "escrowReturnMilestones",
              "type": "uint256[2][]"
            },
            {
              "internalType": "uint256",
              "name": "thresholdPublicAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITokenSale.Params",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forAirdrop",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaintainers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenSales",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maintainer",
          "type": "address"
        }
      ],
      "name": "isMaintainer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterTokenSale",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setMasterContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setOracleContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSales",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSalesM",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0cd3eafc95143a2a2304177cd996aa21beb1fb299d4045cbe8a7dcd0893f33aa",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2203234",
    "logsBloom": "0x
    "blockHash": "0x7f0ffe7fe893205f054007abb3a581cad7620d317c3ee1ccf42b668904e29eb4",
    "transactionHash": "0x0cd3eafc95143a2a2304177cd996aa21beb1fb299d4045cbe8a7dcd0893f33aa",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2203234",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cfc1857a56117699cbc970ea70bc13d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instanceAddress\",\"type\":\"address\"}],\"name\":\"CreateTokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"airdrop\",\"type\":\"address\"}],\"name\":\"SetAirdrop\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"initialAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSaleSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privatePoolSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privatePoolSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicPoolSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicPoolSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privatePoolTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicPoolTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"democracyHourEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicRoundBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"escrowPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"tierPrices\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"escrowReturnMilestones\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256\",\"name\":\"thresholdPublicAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenSale.Params\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forAirdrop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaintainers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenSales\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"}],\"name\":\"isMaintainer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterTokenSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMasterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSalesM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Admin.sol\":\"Admin\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IAdmin.sol\\\";\\nimport \\\"./LithiumAdmin.sol\\\";\\n\\ncontract Admin is LithiumAdmin, IAdmin {\\n    using SafeERC20 for IERC20;\\n    address[] public tokenSales;\\n\\n    address public masterTokenSale;\\n    address public stakingContract;\\n    address public override forAirdrop;\\n    address public exchangeOracle;\\n\\n    mapping(address => bool) public override tokenSalesM;\\n\\n    event CreateTokenSale(address instanceAddress);\\n    event SetAirdrop(address airdrop);\\n\\n    modifier validation(address _address) {\\n        require(_address != address(0), \\\"Zero address\\\");\\n        _;\\n    }\\n\\n    function createPool(ITokenSale.Params calldata _params)\\n        external\\n        override\\n        onlyMaintainer\\n    {\\n        require(\\n            _params.totalSaleSupply > 0,\\n            \\\"Token supply for sale should be greater then 0\\\"\\n        );\\n        require(\\n            _params.privatePoolSaleEndTime > _params.privatePoolSaleStartTime,\\n            \\\"End time should be greater then start time\\\"\\n        );\\n        require(\\n            _params.publicPoolSaleStartTime > _params.privatePoolSaleStartTime,\\n            \\\"Public round should start after private round\\\"\\n        );\\n        require(\\n            _params.publicPoolSaleEndTime > _params.publicPoolSaleStartTime,\\n            \\\"End time should be greater then start time\\\"\\n        );\\n        // require(\\n        //     _params.democracyHourEndTimestamp == _params.privatePoolSaleStartTime + 1 hours,\\n        //     'democracy hour != private end + hour'\\n        // );\\n        require(\\n            _params.initialAddress != address(0) && _params.token != address(0),\\n            \\\"initialAddress || token == 0\\\"\\n        );\\n\\n        address instance = Clones.clone(masterTokenSale);\\n\\n        ITokenSale(instance).initialize(\\n            _params,\\n            stakingContract,\\n            address(this),\\n            exchangeOracle\\n        );\\n        tokenSales.push(instance);\\n        tokenSalesM[instance] = true;\\n\\n        IERC20(_params.token).safeTransferFrom(\\n            _params.initialAddress,\\n            instance,\\n            _params.totalSaleSupply\\n        );\\n\\n        emit CreateTokenSale(instance);\\n    }\\n\\n    function getTokenSales() external view override returns (address[] memory) {\\n        return tokenSales;\\n    }\\n\\n    function setMasterContract(address _address)\\n        external\\n        override\\n        onlyMaintainer\\n        validation(_address)\\n    {\\n        masterTokenSale = _address;\\n        //TODO: event?\\n    }\\n\\n    function setAirdrop(address _address)\\n        external\\n        override\\n        onlyMaintainer\\n        validation(_address)\\n    {\\n        forAirdrop = _address;\\n        emit SetAirdrop(_address);\\n    }\\n\\n    function setStakingContract(address _address)\\n        external\\n        override\\n        onlyMaintainer\\n        validation(_address)\\n    {\\n        stakingContract = _address;\\n    }\\n\\n    function setOracleContract(address _address)\\n        external\\n        override\\n        onlyMaintainer\\n        validation(_address)\\n    {\\n        exchangeOracle = _address;\\n    }\\n}\\n\",\"keccak256\":\"0x280dbcbed328f070b214ce2566dfdb0a7f2c38437d52ccc15fcb7484bca5dab9\",\"license\":\"UNLICENSED\"},\"contracts/LithiumAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\ncontract LithiumAdmin {\\n    mapping(address => bool) private maintainers;\\n    mapping(address => uint256) private maintainerIndexes;\\n    address[] private maintainersList;\\n\\n    constructor() {\\n        maintainers[msg.sender] = true;\\n        maintainersList.push(msg.sender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        require(isMaintainer(msg.sender), \\\"Address is not maintainer\\\");\\n        _;\\n    }\\n\\n    function addMaintainer(address candidate) public onlyMaintainer {\\n        require(!maintainers[candidate], \\\"Candidate already is maintainer\\\");\\n        maintainers[candidate] = true;\\n        maintainerIndexes[candidate] = maintainersList.length;\\n        maintainersList.push(candidate);\\n    }\\n\\n    function removeMaintainer(address maintainer) public onlyMaintainer {\\n        require(maintainers[maintainer], \\\"Address is not a maintainer\\\");\\n\\n        maintainers[maintainer] = false;\\n        maintainersList[maintainerIndexes[maintainer]] = maintainersList[\\n            maintainersList.length - 1\\n        ];\\n        maintainerIndexes[\\n            maintainersList[maintainersList.length - 1]\\n        ] = maintainerIndexes[maintainer];\\n        maintainersList.pop();\\n        delete maintainerIndexes[maintainer];\\n    }\\n\\n    function isMaintainer(address maintainer) public view returns (bool) {\\n        return maintainers[maintainer];\\n    }\\n\\n    function getMaintainers() public view returns (address[] memory) {\\n        return maintainersList;\\n    }\\n}\\n\",\"keccak256\":\"0x7049b05937cb2786dd091146440dc40da185b15dfd9a30173aec57038e2b3171\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport './ITokenSale.sol';\\n\\ninterface IAdmin {\\n    function forAirdrop() external returns(address);\\n    function tokenSalesM(address) external returns(bool);\\n    function setMasterContract(address) external;\\n    function setAirdrop(address _newAddress) external;\\n    function setStakingContract(address) external;\\n    function setOracleContract(address) external;\\n    function createPool(ITokenSale.Params calldata _params) external;\\n    function getTokenSales() external view returns (address[] memory);\\n\\n}\",\"keccak256\":\"0x1ed2b192b7c49f7c6535d62fe5f8a6215f26b4172f4de36fc13d66c72a4e4314\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITokenSale.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\ninterface ITokenSale {\\n    struct Params {\\n        address initialAddress;\\n        address token;\\n        uint256 totalSaleSupply; //MUST BE 10**18;\\n        uint256 privatePoolSaleStartTime;\\n        uint256 privatePoolSaleEndTime;\\n        uint256 publicPoolSaleStartTime;\\n        uint256 publicPoolSaleEndTime;\\n        uint256 privatePoolTokenPrice;// MUST BE 10**18 in $\\n        uint256 publicPoolTokenPrice;// MUST BE 10**18 in $\\n        uint256 democracyHourEndTimestamp;\\n        uint256 publicRoundBuyLimit;//LIKE ERC20\\n        uint256 escrowPercentage;\\n        uint256[4] tierPrices; // MUST BE 10**18 in $\\n        uint256[2][] escrowReturnMilestones;\\n        uint256 thresholdPublicAmount;\\n    }\\n    function initialize(Params memory, address, address, address) external;\\n    function claim() external;\\n    function addToBlackList(address[] memory) external;\\n    function takeLeftovers() external;\\n    function takeAirdrop() external;\\n}\",\"keccak256\":\"0xa3409fe157a8e5f83faaba6e4f1181c91595718ecf50afbf807bd4d31c353985\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506125db806100da6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638c30d6d811610097578063d17f422511610066578063d17f422514610285578063d8baf7cf146102a3578063dd57366a146102bf578063ee99205c146102ef57610100565b80638c30d6d8146102115780639dd373b91461022d578063a05220ad14610249578063cb1fb0141461026757610100565b80636b453c1f116100d35780636b453c1f1461018b57806372820dbc146101a75780638a1ac551146101c35780638bf8150d146101e157610100565b80630c6ed9c2146101055780632a3a236f1461012357806345cf084b1461013f578063496ccd9b1461016f575b600080fd5b61010d61030d565b60405161011a9190611e5f565b60405180910390f35b61013d60048036038101906101389190611819565b61039b565b005b610159600480360381019061015491906118ac565b610499565b6040516101669190611e0d565b60405180910390f35b61018960048036038101906101849190611819565b6104d8565b005b6101a560048036038101906101a09190611819565b6105d6565b005b6101c160048036038101906101bc9190611819565b6107b0565b005b6101cb6108e5565b6040516101d89190611e0d565b60405180910390f35b6101fb60048036038101906101f69190611819565b61090b565b6040516102089190611e81565b60405180910390f35b61022b6004803603810190610226919061186b565b61092b565b005b61024760048036038101906102429190611819565b610d94565b005b610251610e92565b60405161025e9190611e0d565b60405180910390f35b61026f610eb8565b60405161027c9190611e0d565b60405180910390f35b61028d610ede565b60405161029a9190611e5f565b60405180910390f35b6102bd60048036038101906102b89190611819565b610f6c565b005b6102d960048036038101906102d49190611819565b611378565b6040516102e69190611e81565b60405180910390f35b6102f76113cd565b6040516103049190611e0d565b60405180910390f35b6060600380548060200260200160405190810160405280929190818152602001828054801561039157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610347575b5050505050905090565b6103a433611378565b6103e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103da90611ebe565b60405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044b90611f1e565b60405180910390fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600381815481106104a957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104e133611378565b610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051790611ebe565b60405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058890611f1e565b60405180910390fd5b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6105df33611378565b61061e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061590611ebe565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156106aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a190611f9e565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600280549050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107b933611378565b6107f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ef90611ebe565b60405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086090611f1e565b60405180910390fd5b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbf0e311b1201ad81f296821d42657c501de65d478afbafc3c7cacbd1bcd88f4b826040516108d99190611e0d565b60405180910390a15050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915054906101000a900460ff1681565b61093433611378565b610973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096a90611ebe565b60405180910390fd5b60008160400135116109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b19061201e565b60405180910390fd5b8060600135816080013511610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90611ede565b60405180910390fd5b80606001358160a0013511610a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4590611f7e565b60405180910390fd5b8060a001358160c0013511610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f90611ede565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816000016020810190610ac39190611819565b73ffffffffffffffffffffffffffffffffffffffff1614158015610b265750600073ffffffffffffffffffffffffffffffffffffffff16816020016020810190610b0d9190611819565b73ffffffffffffffffffffffffffffffffffffffff1614155b610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c90611fbe565b60405180910390fd5b6000610b92600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166113f3565b90508073ffffffffffffffffffffffffffffffffffffffff16634423805583600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401610c17949392919061203e565b600060405180830381600087803b158015610c3157600080fd5b505af1158015610c45573d6000803e3d6000fd5b505050506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610d59826000016020810190610d1a9190611819565b828460400135856020016020810190610d339190611819565b73ffffffffffffffffffffffffffffffffffffffff166114c8909392919063ffffffff16565b7f38780dedcca1641d8a3829868b1c61839e822b540ca7569d4b791b5015430ab981604051610d889190611e0d565b60405180910390a15050565b610d9d33611378565b610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390611ebe565b60405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4490611f1e565b60405180910390fd5b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606002805480602002602001604051908101604052809291908181526020018280548015610f6257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f18575b5050505050905090565b610f7533611378565b610fb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fab90611ebe565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661103f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103690611efe565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260016002805490506110aa91906121b8565b815481106110e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110611185577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160006002600160028054905061122591906121b8565b8154811061125c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060028054806112fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ba90611f5e565b60405180910390fd5b919050565b61154b846323b872dd60e01b8585856040516024016114e993929190611e28565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611551565b50505050565b60006115b3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116189092919063ffffffff16565b905060008151111561161357808060200190518101906115d39190611842565b611612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160990611ffe565b60405180910390fd5b5b505050565b60606116278484600085611630565b90509392505050565b606082471015611675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166c90611f3e565b60405180910390fd5b61167e85611744565b6116bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b490611fde565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116e69190611df6565b60006040518083038185875af1925050503d8060008114611723576040519150601f19603f3d011682016040523d82523d6000602084013e611728565b606091505b5091509150611738828286611757565b92505050949350505050565b600080823b905060008111915050919050565b60608315611767578290506117b7565b60008351111561177a5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ae9190611e9c565b60405180910390fd5b9392505050565b6000813590506117cd81612560565b92915050565b6000815190506117e281612577565b92915050565b600061024082840312156117fb57600080fd5b81905092915050565b6000813590506118138161258e565b92915050565b60006020828403121561182b57600080fd5b6000611839848285016117be565b91505092915050565b60006020828403121561185457600080fd5b6000611862848285016117d3565b91505092915050565b60006020828403121561187d57600080fd5b600082013567ffffffffffffffff81111561189757600080fd5b6118a3848285016117e8565b91505092915050565b6000602082840312156118be57600080fd5b60006118cc84828501611804565b91505092915050565b60006118e18383611905565b60208301905092915050565b60006118f983836119de565b60408301905092915050565b61190e816121ec565b82525050565b61191d816121ec565b82525050565b600061192e826120a4565b61193881856120df565b93506119438361208a565b8060005b8381101561197457815161195b88826118d5565b9750611966836120c5565b925050600181019050611947565b5085935050505092915050565b600061198d83856120f0565b93506119988261209a565b8060005b858110156119d1576119ae828461218b565b6119b888826118ed565b97506119c3836120d2565b92505060018101905061199c565b5085925050509392505050565b6119ea60408383612234565b5050565b6119fa60808383612234565b5050565b611a07816121fe565b82525050565b6000611a18826120af565b611a228185612101565b9350611a32818560208601612243565b80840191505092915050565b6000611a49826120ba565b611a53818561210c565b9350611a63818560208601612243565b611a6c816122a5565b840191505092915050565b6000611a8460198361210c565b9150611a8f826122b6565b602082019050919050565b6000611aa7602a8361210c565b9150611ab2826122df565b604082019050919050565b6000611aca601b8361210c565b9150611ad58261232e565b602082019050919050565b6000611aed600c8361210c565b9150611af882612357565b602082019050919050565b6000611b1060268361210c565b9150611b1b82612380565b604082019050919050565b6000611b3360168361210c565b9150611b3e826123cf565b602082019050919050565b6000611b56602d8361210c565b9150611b61826123f8565b604082019050919050565b6000611b79601f8361210c565b9150611b8482612447565b602082019050919050565b6000611b9c601c8361210c565b9150611ba782612470565b602082019050919050565b6000611bbf601d8361210c565b9150611bca82612499565b602082019050919050565b6000611be2602a8361210c565b9150611bed826124c2565b604082019050919050565b6000611c05602e8361210c565b9150611c1082612511565b604082019050919050565b60006102408301611c2f600084018461211d565b611c3c6000860182611905565b50611c4a602084018461211d565b611c576020860182611905565b50611c6560408401846121a1565b611c726040860182611dd8565b50611c8060608401846121a1565b611c8d6060860182611dd8565b50611c9b60808401846121a1565b611ca86080860182611dd8565b50611cb660a08401846121a1565b611cc360a0860182611dd8565b50611cd160c08401846121a1565b611cde60c0860182611dd8565b50611cec60e08401846121a1565b611cf960e0860182611dd8565b50611d086101008401846121a1565b611d16610100860182611dd8565b50611d256101208401846121a1565b611d33610120860182611dd8565b50611d426101408401846121a1565b611d50610140860182611dd8565b50611d5f6101608401846121a1565b611d6d610160860182611dd8565b50611d7c610180840184612196565b611d8a6101808601826119ee565b50611d99610200840184612134565b858303610200870152611dad838284611981565b92505050611dbf6102208401846121a1565b611dcd610220860182611dd8565b508091505092915050565b611de18161222a565b82525050565b611df08161222a565b82525050565b6000611e028284611a0d565b915081905092915050565b6000602082019050611e226000830184611914565b92915050565b6000606082019050611e3d6000830186611914565b611e4a6020830185611914565b611e576040830184611de7565b949350505050565b60006020820190508181036000830152611e798184611923565b905092915050565b6000602082019050611e9660008301846119fe565b92915050565b60006020820190508181036000830152611eb68184611a3e565b905092915050565b60006020820190508181036000830152611ed781611a77565b9050919050565b60006020820190508181036000830152611ef781611a9a565b9050919050565b60006020820190508181036000830152611f1781611abd565b9050919050565b60006020820190508181036000830152611f3781611ae0565b9050919050565b60006020820190508181036000830152611f5781611b03565b9050919050565b60006020820190508181036000830152611f7781611b26565b9050919050565b60006020820190508181036000830152611f9781611b49565b9050919050565b60006020820190508181036000830152611fb781611b6c565b9050919050565b60006020820190508181036000830152611fd781611b8f565b9050919050565b60006020820190508181036000830152611ff781611bb2565b9050919050565b6000602082019050818103600083015261201781611bd5565b9050919050565b6000602082019050818103600083015261203781611bf8565b9050919050565b600060808201905081810360008301526120588187611c1b565b90506120676020830186611914565b6120746040830185611914565b6120816060830184611914565b95945050505050565b6000819050602082019050919050565b6000819050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000604082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061212c60208401846117be565b905092915050565b6000808335600160200384360303811261214d57600080fd5b83810192508235915060208301925067ffffffffffffffff82111561217157600080fd5b60408202360384131561218357600080fd5b509250929050565b600082905092915050565b600082905092915050565b60006121b06020840184611804565b905092915050565b60006121c38261222a565b91506121ce8361222a565b9250828210156121e1576121e0612276565b5b828203905092915050565b60006121f78261220a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612261578082015181840152602081019050612246565b83811115612270576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f41646472657373206973206e6f74206d61696e7461696e657200000000000000600082015250565b7f456e642074696d652073686f756c642062652067726561746572207468656e2060008201527f73746172742074696d6500000000000000000000000000000000000000000000602082015250565b7f41646472657373206973206e6f742061206d61696e7461696e65720000000000600082015250565b7f5a65726f20616464726573730000000000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f5075626c696320726f756e642073686f756c642073746172742061667465722060008201527f7072697661746520726f756e6400000000000000000000000000000000000000602082015250565b7f43616e64696461746520616c7265616479206973206d61696e7461696e657200600082015250565b7f696e697469616c41646472657373207c7c20746f6b656e203d3d203000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f546f6b656e20737570706c7920666f722073616c652073686f756c642062652060008201527f67726561746572207468656e2030000000000000000000000000000000000000602082015250565b612569816121ec565b811461257457600080fd5b50565b612580816121fe565b811461258b57600080fd5b50565b6125978161222a565b81146125a257600080fd5b5056fea2646970667358221220a9803e8b4d0af1f59efa5d83df565c9a50905997b3c88e8e308106021d78f89864736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1664,
        "contract": "contracts/Admin.sol:Admin",
        "label": "maintainers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1668,
        "contract": "contracts/Admin.sol:Admin",
        "label": "maintainerIndexes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1671,
        "contract": "contracts/Admin.sol:Admin",
        "label": "maintainersList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1429,
        "contract": "contracts/Admin.sol:Admin",
        "label": "tokenSales",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1431,
        "contract": "contracts/Admin.sol:Admin",
        "label": "masterTokenSale",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1433,
        "contract": "contracts/Admin.sol:Admin",
        "label": "stakingContract",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1436,
        "contract": "contracts/Admin.sol:Admin",
        "label": "forAirdrop",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1438,
        "contract": "contracts/Admin.sol:Admin",
        "label": "exchangeOracle",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1443,
        "contract": "contracts/Admin.sol:Admin",
        "label": "tokenSalesM",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}