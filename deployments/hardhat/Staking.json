{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTierOf",
      "outputs": [
        {
          "internalType": "enum IStaking.Tiers",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setPoolsEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "stakedAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9d63150e9785b00fa3680ff3193942a4ecd9a59d0d452f4fca01b9fa5ac6a6d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1333583",
    "logsBloom": "0x
    "blockHash": "0x85edd1a77a9192c025d5bad5e437b2caabd538314fd7f090f2c2476dad3a264b",
    "transactionHash": "0xb9d63150e9785b00fa3680ff3193942a4ecd9a59d0d452f4fca01b9fa5ac6a6d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xb9d63150e9785b00fa3680ff3193942a4ecd9a59d0d452f4fca01b9fa5ac6a6d",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x85edd1a77a9192c025d5bad5e437b2caabd538314fd7f090f2c2476dad3a264b"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "1333583",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "solcInputHash": "be07310a7232c87ac6b26d787e87fba3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTierOf\",\"outputs\":[{\"internalType\":\"enum IStaking.Tiers\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPoolsEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"stakedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/IAdmin.sol\\\";\\n\\ncontract Staking is Ownable, IStaking {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant STARTER_TIER = 200000 * 10**18;\\n    uint256 constant INVESTOR_TIER = 600000 * 10**18;\\n    uint256 constant STRATEGIST_TIER = 2500000 * 10**18;\\n    uint256 constant EVANGELIST_TIER = 7000000 * 10**18;\\n\\n    IERC20 public lpToken;\\n    IAdmin admin;\\n\\n    mapping(address => uint256) private _userDepositAmounts;\\n    mapping(address => uint256) poolsEndTime;\\n\\n    constructor(address _token, address _admin) {\\n        lpToken = IERC20(_token);\\n        admin = IAdmin(_admin);\\n    }\\n\\n    modifier onlyInstances() {\\n        require(admin.tokenSalesM(msg.sender), \\\"Sender is not instance\\\");\\n        _;\\n    }\\n\\n    modifier canUnstake() {\\n        require(\\n            block.timestamp > poolsEndTime[msg.sender],\\n            \\\"Staking: wait to be able unstake\\\"\\n        );\\n        _;\\n    }\\n\\n    function stakedAmountOf(address _address)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _userDepositAmounts[_address];\\n    }\\n\\n    function getTierOf(address _address)\\n        external\\n        view\\n        override\\n        returns (Tiers)\\n    {\\n        return _tierByAmount(_userDepositAmounts[_address]);\\n    }\\n\\n    function setPoolsEndTime(address _address, uint256 _time)\\n        external\\n        override\\n        onlyInstances\\n    {\\n        if (poolsEndTime[_address] < _time) {\\n            poolsEndTime[_address] = _time;\\n        }\\n    }\\n\\n    function stake(uint256 _amount) external override {\\n        require(\\n            _amount > 0,\\n            \\\"Staking: deposited amount must be greater than 0\\\"\\n        );\\n        _userDepositAmounts[msg.sender] += _amount;\\n        lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    function unstake(uint256 _amount) external override canUnstake {\\n        uint256 amount = _amount > 0\\n            ? _amount\\n            : _userDepositAmounts[msg.sender];\\n        _withdraw(amount);\\n    }\\n\\n    function _tierByAmount(uint256 _amount) internal pure returns (Tiers) {\\n        if (_amount >= EVANGELIST_TIER) {\\n            return Tiers.Evangelist;\\n        }\\n        if (_amount >= STRATEGIST_TIER) {\\n            return Tiers.Strategist;\\n        }\\n        if (_amount >= INVESTOR_TIER) {\\n            return Tiers.Investor;\\n        }\\n        if (_amount >= STARTER_TIER) {\\n            return Tiers.Starter;\\n        }\\n        return Tiers.None;\\n    }\\n\\n    function _withdraw(uint256 _amount) private {\\n        _userDepositAmounts[msg.sender] -= _amount;\\n        lpToken.safeTransfer(msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa3769c86b91dece9d2bb6bf240182bc3217706e63c460a3b5c522a80d9a9ca3f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport './ITokenSale.sol';\\n\\ninterface IAdmin {\\n    function forAirdrop() external returns(address);\\n    function tokenSalesM(address) external returns(bool);\\n    function setMasterContract(address) external;\\n    function setAirdrop(address _newAddress) external;\\n    function setStakingContract(address) external;\\n    function setOracleContract(address) external;\\n    function createPool(ITokenSale.Params calldata _params) external;\\n    function getTokenSales() external view returns (address[] memory);\\n\\n}\",\"keccak256\":\"0x1ed2b192b7c49f7c6535d62fe5f8a6215f26b4172f4de36fc13d66c72a4e4314\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\ninterface IStaking {\\n    enum Tiers {\\n        None,\\n        Starter,\\n        Investor,\\n        Strategist,\\n        Evangelist\\n    }\\n\\n    function setPoolsEndTime(address, uint256) external;\\n    function stakedAmountOf(address) external view returns (uint256);\\n    function stake(uint256) external;\\n    function unstake(uint256) external;\\n    function getTierOf(address) external view returns(Tiers);\\n}\",\"keccak256\":\"0x4db6d14c6ba7fe3203684efcc9d5986c00d60d50d51c348ecdde1a7430d22250\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITokenSale.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\ninterface ITokenSale {\\n    struct Params {\\n        address initialAddress;\\n        address token;\\n        uint256 totalSaleSupply; //MUST BE 10**18;\\n        uint256 privatePoolSaleStartTime;\\n        uint256 privatePoolSaleEndTime;\\n        uint256 publicPoolSaleStartTime;\\n        uint256 publicPoolSaleEndTime;\\n        uint256 privatePoolTokenPrice;// MUST BE 10**18 in $\\n        uint256 publicPoolTokenPrice;// MUST BE 10**18 in $\\n        uint256 democracyHourEndTimestamp;\\n        uint256 publicRoundBuyLimit;//LIKE ERC20\\n        uint256 escrowPercentage;\\n        uint256[4] tierPrices; // MUST BE 10**18 in $\\n        uint256[2][] escrowReturnMilestones;\\n        uint256 thresholdPublicAmount;\\n    }\\n    function initialize(Params memory, address, address, address) external;\\n    function claim() external;\\n    function addToBlackList(address[] memory) external;\\n    function takeLeftovers() external;\\n    function takeAirdrop() external;\\n}\",\"keccak256\":\"0xa3409fe157a8e5f83faaba6e4f1181c91595718ecf50afbf807bd4d31c353985\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200183c3803806200183c8339818101604052810190620000379190620001c4565b620000576200004b620000e160201b60201c565b620000e960201b60201c565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000253565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001be8162000239565b92915050565b60008060408385031215620001d857600080fd5b6000620001e885828601620001ad565b9250506020620001fb85828601620001ad565b9150509250929050565b6000620002128262000219565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002448162000205565b81146200025057600080fd5b50565b6115d980620002636000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146101325780638da5cb5b1461013c5780638dda5f6e1461015a578063a694fc3a14610176578063f2fde38b1461019257610093565b8063235a5092146100985780632e17de78146100c85780635fcbd285146100e45780635fcdad9114610102575b600080fd5b6100b260048036038101906100ad9190610d01565b6101ae565b6040516100bf9190611023565b60405180910390f35b6100e260048036038101906100dd9190610d8f565b6101ff565b005b6100ec6102df565b6040516100f99190611008565b60405180910390f35b61011c60048036038101906101179190610d01565b610305565b6040516101299190611160565b60405180910390f35b61013a61034e565b005b6101446103d6565b6040516101519190610f8d565b60405180910390f35b610174600480360381019061016f9190610d2a565b6103ff565b005b610190600480360381019061018b9190610d8f565b61057b565b005b6101ac60048036038101906101a79190610d01565b610666565b005b60006101f8600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461075e565b9050919050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544211610280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027790611140565b60405180910390fd5b60008082116102ce57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102d0565b815b90506102db816107d4565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61035661087a565b73ffffffffffffffffffffffffffffffffffffffff166103746103d6565b73ffffffffffffffffffffffffffffffffffffffff16146103ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c1906110e0565b60405180910390fd5b6103d46000610882565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bf8150d336040518263ffffffff1660e01b815260040161045a9190610f8d565b602060405180830381600087803b15801561047457600080fd5b505af1158015610488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ac9190610d66565b6104eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e2906110c0565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156105775780600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050565b600081116105be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b590611080565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461060d91906111ad565b92505081905550610663333083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610946909392919063ffffffff16565b50565b61066e61087a565b73ffffffffffffffffffffffffffffffffffffffff1661068c6103d6565b73ffffffffffffffffffffffffffffffffffffffff16146106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d9906110e0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074990611060565b60405180910390fd5b61075b81610882565b50565b60006a05ca4ec2a79a7f67000000821061077b57600490506107cf565b6a0211654585005212800000821061079657600390506107cf565b697f0e10af47c1c700000082106107b057600290506107cf565b692a5a058fc295ed00000082106107ca57600190506107cf565b600090505b919050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108239190611203565b925050819055506108773382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109cf9092919063ffffffff16565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6109c9846323b872dd60e01b85858560405160240161096793929190610fa8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a55565b50505050565b610a508363a9059cbb60e01b84846040516024016109ee929190610fdf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a55565b505050565b6000610ab7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b1c9092919063ffffffff16565b9050600081511115610b175780806020019051810190610ad79190610d66565b610b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0d90611120565b60405180910390fd5b5b505050565b6060610b2b8484600085610b34565b90509392505050565b606082471015610b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b70906110a0565b60405180910390fd5b610b8285610c48565b610bc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb890611100565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610bea9190610f76565b60006040518083038185875af1925050503d8060008114610c27576040519150601f19603f3d011682016040523d82523d6000602084013e610c2c565b606091505b5091509150610c3c828286610c5b565b92505050949350505050565b600080823b905060008111915050919050565b60608315610c6b57829050610cbb565b600083511115610c7e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb2919061103e565b60405180910390fd5b9392505050565b600081359050610cd18161155e565b92915050565b600081519050610ce681611575565b92915050565b600081359050610cfb8161158c565b92915050565b600060208284031215610d1357600080fd5b6000610d2184828501610cc2565b91505092915050565b60008060408385031215610d3d57600080fd5b6000610d4b85828601610cc2565b9250506020610d5c85828601610cec565b9150509250929050565b600060208284031215610d7857600080fd5b6000610d8684828501610cd7565b91505092915050565b600060208284031215610da157600080fd5b6000610daf84828501610cec565b91505092915050565b610dc181611237565b82525050565b6000610dd28261117b565b610ddc8185611191565b9350610dec8185602086016112c8565b80840191505092915050565b610e0181611292565b82525050565b610e10816112b6565b82525050565b6000610e2182611186565b610e2b818561119c565b9350610e3b8185602086016112c8565b610e4481611359565b840191505092915050565b6000610e5c60268361119c565b9150610e678261136a565b604082019050919050565b6000610e7f60308361119c565b9150610e8a826113b9565b604082019050919050565b6000610ea260268361119c565b9150610ead82611408565b604082019050919050565b6000610ec560168361119c565b9150610ed082611457565b602082019050919050565b6000610ee860208361119c565b9150610ef382611480565b602082019050919050565b6000610f0b601d8361119c565b9150610f16826114a9565b602082019050919050565b6000610f2e602a8361119c565b9150610f39826114d2565b604082019050919050565b6000610f5160208361119c565b9150610f5c82611521565b602082019050919050565b610f7081611288565b82525050565b6000610f828284610dc7565b915081905092915050565b6000602082019050610fa26000830184610db8565b92915050565b6000606082019050610fbd6000830186610db8565b610fca6020830185610db8565b610fd76040830184610f67565b949350505050565b6000604082019050610ff46000830185610db8565b6110016020830184610f67565b9392505050565b600060208201905061101d6000830184610df8565b92915050565b60006020820190506110386000830184610e07565b92915050565b600060208201905081810360008301526110588184610e16565b905092915050565b6000602082019050818103600083015261107981610e4f565b9050919050565b6000602082019050818103600083015261109981610e72565b9050919050565b600060208201905081810360008301526110b981610e95565b9050919050565b600060208201905081810360008301526110d981610eb8565b9050919050565b600060208201905081810360008301526110f981610edb565b9050919050565b6000602082019050818103600083015261111981610efe565b9050919050565b6000602082019050818103600083015261113981610f21565b9050919050565b6000602082019050818103600083015261115981610f44565b9050919050565b60006020820190506111756000830184610f67565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006111b882611288565b91506111c383611288565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111f8576111f76112fb565b5b828201905092915050565b600061120e82611288565b915061121983611288565b92508282101561122c5761122b6112fb565b5b828203905092915050565b600061124282611268565b9050919050565b60008115159050919050565b60008190506112638261154a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061129d826112a4565b9050919050565b60006112af82611268565b9050919050565b60006112c182611255565b9050919050565b60005b838110156112e65780820151818401526020810190506112cb565b838111156112f5576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a206465706f736974656420616d6f756e74206d757374206260008201527f652067726561746572207468616e203000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f53656e646572206973206e6f7420696e7374616e636500000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a207761697420746f2062652061626c6520756e7374616b65600082015250565b6005811061155b5761155a61132a565b5b50565b61156781611237565b811461157257600080fd5b50565b61157e81611249565b811461158957600080fd5b50565b61159581611288565b81146115a057600080fd5b5056fea2646970667358221220b06117e3f1350e4a1a165c519f74e4f31f112907949995bda313f5d53ebad34464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146101325780638da5cb5b1461013c5780638dda5f6e1461015a578063a694fc3a14610176578063f2fde38b1461019257610093565b8063235a5092146100985780632e17de78146100c85780635fcbd285146100e45780635fcdad9114610102575b600080fd5b6100b260048036038101906100ad9190610d01565b6101ae565b6040516100bf9190611023565b60405180910390f35b6100e260048036038101906100dd9190610d8f565b6101ff565b005b6100ec6102df565b6040516100f99190611008565b60405180910390f35b61011c60048036038101906101179190610d01565b610305565b6040516101299190611160565b60405180910390f35b61013a61034e565b005b6101446103d6565b6040516101519190610f8d565b60405180910390f35b610174600480360381019061016f9190610d2a565b6103ff565b005b610190600480360381019061018b9190610d8f565b61057b565b005b6101ac60048036038101906101a79190610d01565b610666565b005b60006101f8600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461075e565b9050919050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544211610280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027790611140565b60405180910390fd5b60008082116102ce57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102d0565b815b90506102db816107d4565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61035661087a565b73ffffffffffffffffffffffffffffffffffffffff166103746103d6565b73ffffffffffffffffffffffffffffffffffffffff16146103ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c1906110e0565b60405180910390fd5b6103d46000610882565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bf8150d336040518263ffffffff1660e01b815260040161045a9190610f8d565b602060405180830381600087803b15801561047457600080fd5b505af1158015610488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ac9190610d66565b6104eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e2906110c0565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156105775780600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050565b600081116105be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b590611080565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461060d91906111ad565b92505081905550610663333083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610946909392919063ffffffff16565b50565b61066e61087a565b73ffffffffffffffffffffffffffffffffffffffff1661068c6103d6565b73ffffffffffffffffffffffffffffffffffffffff16146106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d9906110e0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074990611060565b60405180910390fd5b61075b81610882565b50565b60006a05ca4ec2a79a7f67000000821061077b57600490506107cf565b6a0211654585005212800000821061079657600390506107cf565b697f0e10af47c1c700000082106107b057600290506107cf565b692a5a058fc295ed00000082106107ca57600190506107cf565b600090505b919050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108239190611203565b925050819055506108773382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109cf9092919063ffffffff16565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6109c9846323b872dd60e01b85858560405160240161096793929190610fa8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a55565b50505050565b610a508363a9059cbb60e01b84846040516024016109ee929190610fdf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a55565b505050565b6000610ab7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b1c9092919063ffffffff16565b9050600081511115610b175780806020019051810190610ad79190610d66565b610b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0d90611120565b60405180910390fd5b5b505050565b6060610b2b8484600085610b34565b90509392505050565b606082471015610b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b70906110a0565b60405180910390fd5b610b8285610c48565b610bc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb890611100565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610bea9190610f76565b60006040518083038185875af1925050503d8060008114610c27576040519150601f19603f3d011682016040523d82523d6000602084013e610c2c565b606091505b5091509150610c3c828286610c5b565b92505050949350505050565b600080823b905060008111915050919050565b60608315610c6b57829050610cbb565b600083511115610c7e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb2919061103e565b60405180910390fd5b9392505050565b600081359050610cd18161155e565b92915050565b600081519050610ce681611575565b92915050565b600081359050610cfb8161158c565b92915050565b600060208284031215610d1357600080fd5b6000610d2184828501610cc2565b91505092915050565b60008060408385031215610d3d57600080fd5b6000610d4b85828601610cc2565b9250506020610d5c85828601610cec565b9150509250929050565b600060208284031215610d7857600080fd5b6000610d8684828501610cd7565b91505092915050565b600060208284031215610da157600080fd5b6000610daf84828501610cec565b91505092915050565b610dc181611237565b82525050565b6000610dd28261117b565b610ddc8185611191565b9350610dec8185602086016112c8565b80840191505092915050565b610e0181611292565b82525050565b610e10816112b6565b82525050565b6000610e2182611186565b610e2b818561119c565b9350610e3b8185602086016112c8565b610e4481611359565b840191505092915050565b6000610e5c60268361119c565b9150610e678261136a565b604082019050919050565b6000610e7f60308361119c565b9150610e8a826113b9565b604082019050919050565b6000610ea260268361119c565b9150610ead82611408565b604082019050919050565b6000610ec560168361119c565b9150610ed082611457565b602082019050919050565b6000610ee860208361119c565b9150610ef382611480565b602082019050919050565b6000610f0b601d8361119c565b9150610f16826114a9565b602082019050919050565b6000610f2e602a8361119c565b9150610f39826114d2565b604082019050919050565b6000610f5160208361119c565b9150610f5c82611521565b602082019050919050565b610f7081611288565b82525050565b6000610f828284610dc7565b915081905092915050565b6000602082019050610fa26000830184610db8565b92915050565b6000606082019050610fbd6000830186610db8565b610fca6020830185610db8565b610fd76040830184610f67565b949350505050565b6000604082019050610ff46000830185610db8565b6110016020830184610f67565b9392505050565b600060208201905061101d6000830184610df8565b92915050565b60006020820190506110386000830184610e07565b92915050565b600060208201905081810360008301526110588184610e16565b905092915050565b6000602082019050818103600083015261107981610e4f565b9050919050565b6000602082019050818103600083015261109981610e72565b9050919050565b600060208201905081810360008301526110b981610e95565b9050919050565b600060208201905081810360008301526110d981610eb8565b9050919050565b600060208201905081810360008301526110f981610edb565b9050919050565b6000602082019050818103600083015261111981610efe565b9050919050565b6000602082019050818103600083015261113981610f21565b9050919050565b6000602082019050818103600083015261115981610f44565b9050919050565b60006020820190506111756000830184610f67565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006111b882611288565b91506111c383611288565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111f8576111f76112fb565b5b828201905092915050565b600061120e82611288565b915061121983611288565b92508282101561122c5761122b6112fb565b5b828203905092915050565b600061124282611268565b9050919050565b60008115159050919050565b60008190506112638261154a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061129d826112a4565b9050919050565b60006112af82611268565b9050919050565b60006112c182611255565b9050919050565b60005b838110156112e65780820151818401526020810190506112cb565b838111156112f5576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a206465706f736974656420616d6f756e74206d757374206260008201527f652067726561746572207468616e203000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f53656e646572206973206e6f7420696e7374616e636500000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a207761697420746f2062652061626c6520756e7374616b65600082015250565b6005811061155b5761155a61132a565b5b50565b61156781611237565b811461157257600080fd5b50565b61157e81611249565b811461158957600080fd5b50565b61159581611288565b81146115a057600080fd5b5056fea2646970667358221220b06117e3f1350e4a1a165c519f74e4f31f112907949995bda313f5d53ebad34464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 860,
        "contract": "contracts/Staking.sol:Staking",
        "label": "lpToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)273"
      },
      {
        "astId": 863,
        "contract": "contracts/Staking.sol:Staking",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAdmin)2482"
      },
      {
        "astId": 867,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_userDepositAmounts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 871,
        "contract": "contracts/Staking.sol:Staking",
        "label": "poolsEndTime",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAdmin)2482": {
        "encoding": "inplace",
        "label": "contract IAdmin",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)273": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}